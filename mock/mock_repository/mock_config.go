// Code generated by MockGen. DO NOT EDIT.
// Source: config.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ww24/calendar-notifier/domain/model"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// ActionConfigMap mocks base method.
func (m *MockConfig) ActionConfigMap() map[model.ActionName]model.ActionConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionConfigMap")
	ret0, _ := ret[0].(map[model.ActionName]model.ActionConfig)
	return ret0
}

// ActionConfigMap indicates an expected call of ActionConfigMap.
func (mr *MockConfigMockRecorder) ActionConfigMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionConfigMap", reflect.TypeOf((*MockConfig)(nil).ActionConfigMap))
}

// ActionNames mocks base method.
func (m *MockConfig) ActionNames(arg0 model.ScheduleEvent) ([]model.ActionName, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionNames", arg0)
	ret0, _ := ret[0].([]model.ActionName)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ActionNames indicates an expected call of ActionNames.
func (mr *MockConfigMockRecorder) ActionNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionNames", reflect.TypeOf((*MockConfig)(nil).ActionNames), arg0)
}

// Calendar mocks base method.
func (m *MockConfig) Calendar() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calendar")
	ret0, _ := ret[0].(string)
	return ret0
}

// Calendar indicates an expected call of Calendar.
func (mr *MockConfigMockRecorder) Calendar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calendar", reflect.TypeOf((*MockConfig)(nil).Calendar))
}

// RunningMode mocks base method.
func (m *MockConfig) RunningMode() model.RunningMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunningMode")
	ret0, _ := ret[0].(model.RunningMode)
	return ret0
}

// RunningMode indicates an expected call of RunningMode.
func (mr *MockConfigMockRecorder) RunningMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunningMode", reflect.TypeOf((*MockConfig)(nil).RunningMode))
}

// SyncInterval mocks base method.
func (m *MockConfig) SyncInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SyncInterval indicates an expected call of SyncInterval.
func (mr *MockConfigMockRecorder) SyncInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncInterval", reflect.TypeOf((*MockConfig)(nil).SyncInterval))
}
